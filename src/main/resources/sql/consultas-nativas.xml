<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
	version="2.1">
	
	<named-native-query name="Vendas.totalPorMes" result-set-mapping="totalPorMesMapping">
		<query>
			select (extract(year from data_criacao) || '/' || extract(month from data_criacao)) as mes,
       				count(*) as total
			from venda
			where
      			data_criacao >= current_timestamp - interval '6 months'
      			and status = 'EMITIDA'
			group by mes
			order by mes desc
			
		</query>
	</named-native-query>
	
	<sql-result-set-mapping name="totalPorMesMapping">
		<constructor-result target-class="br.com.vini.brewer.dto.VendaMes">
			<column name="mes" class="java.lang.String"/>
			<column name="total" class="java.lang.Integer"/>
		</constructor-result>
	</sql-result-set-mapping>
	
	
	<named-native-query name="Vendas.totalOrigem" result-set-mapping="totalPorOrigemMapping">
		<query>
			select (extract(year from data_criacao) || '/' || extract(month from data_criacao)) as mes,
			       SUM(CASE WHEN cerveja.origem = 'NACIONAL' THEN itemvenda.quantidade ELSE 0 END) as quantidade_nacional,
			       SUM(CASE WHEN cerveja.origem = 'INTERNACIONAL' THEN itemvenda.quantidade ELSE 0 END) as quantidade_internacional
			from venda
			inner join item_venda itemvenda on venda.id = itemvenda.id_venda
			inner join cerveja cerveja on cerveja.id = itemvenda.id_cerveja
			where
			      data_criacao >= current_timestamp - interval '6 months'
			      and status = 'EMITIDA'
			group by mes
			order by mes desc;
		</query>
	</named-native-query>
	
	<sql-result-set-mapping name="totalPorOrigemMapping">
		<constructor-result target-class="br.com.vini.brewer.dto.VendaOrigem">
			<column name="mes" class="java.lang.String"/>
			<column name="quantidade_nacional" class="java.lang.Integer"/>
			<column name="quantidade_internacional" class="java.lang.Integer"/>
		</constructor-result>
	</sql-result-set-mapping>
	
</entity-mappings>